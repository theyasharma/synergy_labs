// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;

contract PurchaseAgreement{
    uint public value;
    address payable public seller;
    address payable public buyer;
    enum State{Created,Locked,Release,Inactive}
    State public state;

    constructor() payable {
        seller=payable(msg.sender);
        value=msg.value/2;
    }
    ///Function can't be called at this State.
    error InvalidState();
    ///only buyer can call this function
    error OnlyBuyer();
    //only seller can call this function
    error OnlySeller();

    modifier inState(State state_){
        if(state!=state_){
            revert InvalidState();
        }
        _;
    }

    modifier onlyBuyer(){
        if(msg.sender!=buyer){
            revert OnlyBuyer();
        }
        _; 
    }
    modifier onlySeller(){
        if(msg.sender!=seller){
            revert OnlySeller();
        }
        _; 
    }



    function confirmPurchase() external inState(State.Created) payable{
        require(msg.value==(2*value),"please send in 2x purchase amount");
        buyer=payable(msg.sender);
        state=State.Locked;
    }

    function confirmRecieved() external inState(State.Locked ){
        state=State.Release;
        buyer.transfer(value);
    }
    function paySeller() external  onlySeller inState(State.Release){
        state=State.Inactive;
        seller.transfer(3*value);

    }
    function abort() external onlySeller inState(State.Created){
        state=State.Inactive;
        seller.transfer(address(this).balance);
    }

}